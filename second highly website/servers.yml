Description: Sillians template to deploy the servers and other resources for Udagram web application (Project 2).

    Udagram Services infrastructure

    Create a Launch Configuration in order to deploy four servers, two located in each of
    your private subnets. The launch configuration will be used by an auto-scaling group.
    You'll need two vCPUs and at least 4GB of RAM. The Operating System to be used is
    Ubuntu 18. So, choose an Instance size and Machine Image (AMI) that best fits this spec
    Be sure to allocate at least 10GB of disk space so that you don't run into issues.
Parameters:
    EnvironmentName:
        Description: This name will be prefixed to all the resources.
        Type: String
    ServerAMIId:
        Description: AMI ID for EC2 instances.
        Type: String
    InstanceType:
        Description: EC2 instance type
        Type: String

Resources:
    # ----------------- Security Groups ------------------
    #-----------------------------------------------------

    # Security Group for Load Balancer
    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress: #Allowing inbound traffic on port 80
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: #Allowing outbound traffic on port 80
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    # Security group for Udagram app servers
    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress: #Allowing inbound traffic on port 80 for accessing application and on port 22 for SSH in case of troubleshooting any issues.
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: # Allowing outbound traffic on all ports so that updates or patches can be downloaded.
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

   
   #----------------- IAM Roles and Policies -------------------
   #------------------------------------------------------------
   #----------An IAM role that allows ec2 to list---------------

   # An IAM role is an IAM identity that you can create in your account that has specific permissions.
   # An IAM role is similar to an IAM user, in that it is an AWS identity with permission policies
   # that determine what the identity can and cannot do in AWS. However, instead of being uniquely
   # associated with one person, a role is intended to be assumable by anyone who needs it. Also,
   # a role does not have standard long-term credentials such as a password or access keys associated
   # with it. Instead, when you assume a role, it provides you with temporary security credentials
   # for your role session

    # An IAM role that allows ec2 to list.
    S3BucketsRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: "/"

    # An instance profile is a container for an IAM role that you can use to pass role information
    # to an EC2 instance when the instance starts.
    # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
    S3BucketsInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
                - Ref: S3BucketsRole

    # An IAM policy that allows EC2 to list items in S3
    S3BucketsPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: S3BucketsPolicy
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Action:
                          - s3:*
                      Resource: "*"
            Roles:
                - Ref: S3BucketsRole


    #----------------- EC2 ------------------
    #-----------------------------------------

    # The LaunchConfiguration resource specifies the Amazon EC2 Auto Scaling launch
    # configuration that can be used by an Auto Scaling group to configure Amazon EC2
    # instances.
    # The LaunchConfiguration resource specifies the Amazon EC2 Auto Scaling launch configuration
    # that can be used by an Auto Scaling group to configure Amazon EC2 instances

    # Launch configuration that will be used when server will spin up.
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacity-demo-1/udacity.zip .
                    unzip -o udacity.zip
            ImageId: !Ref ServerAMIId
            SecurityGroups:
                - Ref: WebServerSecurityGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                      VolumeSize: "10"

    ## --------------Auto Scaling Group----------------- ##

    # Auto scaling group for Udagram App
    # Defines an Amazon EC2 Auto Scaling group with the specified name and attributes.
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRI-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: "4"
            MaxSize: "6"
            TargetGroupARNs:
                - Ref: WebAppTargetGroup


    # ------------ Load balancer ---------------
    #-------------------------------------------

    # Specifies an Application Load Balancer or a Network Load Balancer
    # Load balancer for public subnets with load balancer security group attached
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN01"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN02"
            SecurityGroups:
                - Ref: LBSecurityGroup

    ## --------------Load Balancer Listner-------------------- ##
    # Specifies a listener for an Application Load Balancer or Network Load Balancer
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: "80"
            Protocol: HTTP

    ## Load Balancer Listner Rule ##
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref "WebAppTargetGroup"
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref "Listener"
            Priority: 1


    # ------------ Resource groups -----------
    #-----------------------------------------

    # Specifies a target group for an Application Load Balancer or Network Load Balancer.
    # It checks / path for respose code 200 in every 10 seconds interval
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
    WebAppLBDNSName:
        Description: The website URL DNS name or Public URL of the Load Balancer.
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName