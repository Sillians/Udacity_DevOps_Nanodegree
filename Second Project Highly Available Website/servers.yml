AWSTemplateFormatVersion: 2010-09-09
Description: Sillians Udacity DevOps engineer nanodegree project 2 ( Highly scalable website).

  Udagram Services infrastructure

  Create a Launch Configuration in order to deploy four servers, two located in each of
  your private subnets. The launch configuration will be used by an auto-scaling group.
  You'll need two vCPUs and at least 4GB of RAM. The Operating System to be used is
  Ubuntu 18. So, choose an Instance size and Machine Image (AMI) that best fits this spec
  Be sure to allocate at least 10GB of disk space so that you don't run into issues.

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  WebServerImageId:
    Description: Web serve image id
    Type: String
    Default: ami-00a54827eb7ffcd3c # ami-0fedebff038630644 # Used Ubuntu Server 18.04 LTS

  WebServerVolumeSize:
    Description: Web server disk volume size
    Type: String
    Default: 10

  WebServerInstanceType:
    AllowedValues:
      - t2.nano
      - t2.medium
      - t2.large
      - t3.medium
      - t3.large
      - t3.xlarge
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    ConstraintDescription: Web server instance type. t2.nano - dev instance, t3.medium - default
    Default: t3.medium
    Description: WebServer EC2 instance type
    Type: String

  CPUUsagePercentPolicyTargetValue:
    Description: Average CPU utilization
    Type: String
    Default: 75.0

  ALBRequestCompleteCountTargetValue:
    Description: Number of requests completed per target in an Application Load Balancer target group.
                How many requests the application can handle per instance
    Type: String
    Default: 3


Resources:

  # ----------------- Security Groups ------------------
  #-----------------------------------------------------

  # Security Group for Load Balancer
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress: # Allowing inbound traffic on port 80
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: # Allowing outbound traffic on port 80
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress: #Allowing inbound traffic on port 80 for accessing application and on port 22 for SSH in case of troubleshooting any issues.
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: # Allowing outbound traffic on all ports so that updates or patches can be downloaded.
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0


#----------------- IAM Roles and Policies -------------------
  #------------------------------------------------------------
  #----------An IAM role that allows ec2 to list---------------

  # An IAM role is an IAM identity that you can create in your account that has specific permissions.
  # An IAM role is similar to an IAM user, in that it is an AWS identity with permission policies
  # that determine what the identity can and cannot do in AWS. However, instead of being uniquely
  # associated with one person, a role is intended to be assumable by anyone who needs it. Also,
  # a role does not have standard long-term credentials such as a password or access keys associated
  # with it. Instead, when you assume a role, it provides you with temporary security credentials
  # for your role session

  # Web server Role
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      # ManagedPolicyArns:
      #   - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # An instance profile is a container for an IAM role that you can use to pass role information
  # to an EC2 instance when the instance starts.
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
  
  # An IAM policy that allows EC2 to list items in S3
  S3BucketsPolicy:
      Type: AWS::IAM::Policy
      Properties:
          PolicyName: S3BucketsPolicy
          PolicyDocument:
              Statement:
                  - Effect: Allow
                    Action:
                        - s3:*
                    Resource: "*"
          Roles:
            - !Ref UdacityS3ReadOnlyEC2
  

  #----------------- EC2 ------------------
  #-----------------------------------------
  # The LaunchConfiguration resource specifies the Amazon EC2 Auto Scaling launch
  # configuration that can be used by an Auto Scaling group to configure Amazon EC2
  # instances.
  # The LaunchConfiguration resource specifies the Amazon EC2 Auto Scaling launch configuration
  # that can be used by an Auto Scaling group to configure Amazon EC2 instances

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip         
      ImageId: !Ref WebServerImageId
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      KeyName: new-key-pair
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref WebServerInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"  # /var/log
        Ebs:
          VolumeSize: !Ref WebServerVolumeSize


  # ------------ Resource groups -----------
  #-----------------------------------------

  # Specifies a target group for an Application Load Balancer or Network Load Balancer.
   # It checks / path for respose code 200 in every 10 seconds interval
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /  # physical file path check.
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"


   # Defines an Amazon EC2 Auto Scaling group with the specified name and attributes.
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # Private Subnets
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  

  # ------------ Load balancer ---------------
  #-------------------------------------------

  # Specifies an Application Load Balancer or a Network Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup


  # Specifies a listener for an Application Load Balancer or Network Load Balancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ## Load Balancer Listner Rule
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
          - Field: path-pattern
            Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1


Outputs:

  DNS:
    Description: The website URL DNS name or Public URL of the Load Balancer
    Value:
      !Sub
        - 'http://${DNSName}'
        - {DNSName: !GetAtt 'WebAppLB.DNSName'}
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNSName



  #---------------- Scaling Policies ---------------
  #-------------------------------------------------

  # When you configure dynamic scaling, you define how to scale the capacity of your
  # Auto Scaling group in response to changing demand. For example, let's say that you
  # have a web application that currently runs on two instances, and you want the CPU
  # utilization of the Auto Scaling group to stay at around 50 percent when the load
  # on the application changes. This gives you extra capacity to handle traffic spikes
  # without maintaining an excessive number of idle resources. You can configure your
  # Auto Scaling group to scale dynamically to meet this need by creating a scaling policy.
  # Amazon EC2 Auto Scaling can then scale out your group (add more instances) to deal
  # with high demand at peak times, and scale in your group (run fewer instances) to reduce
  # costs during periods of low utilization

  # Specifies an Amazon EC2 Auto Scaling scaling policy so that the Auto Scaling group
  # can change the number of instances available for your application in response to
  # changing demand. If you create either a step scaling policy or a simple scaling policy,
  # you must also create a CloudWatch alarm that monitors a CloudWatch metric for your
  # Auto Scaling group. Note that you can associate a CloudWatch alarm with only one
  # scaling policy
  

  
  

  
      
  

  
  
